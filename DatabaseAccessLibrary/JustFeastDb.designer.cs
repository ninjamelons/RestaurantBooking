#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseAccessLibrary
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dmai0917_1067303")]
	public partial class JustFeastDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertItemCat(ItemCat instance);
    partial void UpdateItemCat(ItemCat instance);
    partial void DeleteItemCat(ItemCat instance);
    partial void InsertOrderHistory(OrderHistory instance);
    partial void UpdateOrderHistory(OrderHistory instance);
    partial void DeleteOrderHistory(OrderHistory instance);
    partial void InsertMenu(Menu instance);
    partial void UpdateMenu(Menu instance);
    partial void DeleteMenu(Menu instance);
    partial void InsertOrderLineItem(OrderLineItem instance);
    partial void UpdateOrderLineItem(OrderLineItem instance);
    partial void DeleteOrderLineItem(OrderLineItem instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertPrice(Price instance);
    partial void UpdatePrice(Price instance);
    partial void DeletePrice(Price instance);
    partial void InsertResCat(ResCat instance);
    partial void UpdateResCat(ResCat instance);
    partial void DeleteResCat(ResCat instance);
    partial void InsertReservedTable(ReservedTable instance);
    partial void UpdateReservedTable(ReservedTable instance);
    partial void DeleteReservedTable(ReservedTable instance);
    partial void InsertResTable(ResTable instance);
    partial void UpdateResTable(ResTable instance);
    partial void DeleteResTable(ResTable instance);
    partial void InsertRestaurant(Restaurant instance);
    partial void UpdateRestaurant(Restaurant instance);
    partial void DeleteRestaurant(Restaurant instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public JustFeastDbDataContext() : 
				base(global::DatabaseAccessLibrary.Properties.Settings.Default.dmai0917_1067303ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public JustFeastDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JustFeastDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JustFeastDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JustFeastDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<ItemCat> ItemCats
		{
			get
			{
				return this.GetTable<ItemCat>();
			}
		}
		
		public System.Data.Linq.Table<OrderHistory> OrderHistories
		{
			get
			{
				return this.GetTable<OrderHistory>();
			}
		}
		
		public System.Data.Linq.Table<Menu> Menus
		{
			get
			{
				return this.GetTable<Menu>();
			}
		}
		
		public System.Data.Linq.Table<OrderLineItem> OrderLineItems
		{
			get
			{
				return this.GetTable<OrderLineItem>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Price> Prices
		{
			get
			{
				return this.GetTable<Price>();
			}
		}
		
		public System.Data.Linq.Table<ResCat> ResCats
		{
			get
			{
				return this.GetTable<ResCat>();
			}
		}
		
		public System.Data.Linq.Table<ReservedTable> ReservedTables
		{
			get
			{
				return this.GetTable<ReservedTable>();
			}
		}
		
		public System.Data.Linq.Table<ResTable> ResTables
		{
			get
			{
				return this.GetTable<ResTable>();
			}
		}
		
		public System.Data.Linq.Table<Restaurant> Restaurants
		{
			get
			{
				return this.GetTable<Restaurant>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _address;
		
		private System.Nullable<int> _phoneNo;
		
		private string _email;
		
		private int _roleId;
		
		private EntitySet<OrderHistory> _OrderHistories;
		
		private EntityRef<Restaurant> _Restaurant;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnphoneNoChanging(System.Nullable<int> value);
    partial void OnphoneNoChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnroleIdChanging(int value);
    partial void OnroleIdChanged();
    #endregion
		
		public Customer()
		{
			this._OrderHistories = new EntitySet<OrderHistory>(new Action<OrderHistory>(this.attach_OrderHistories), new Action<OrderHistory>(this.detach_OrderHistories));
			this._Restaurant = default(EntityRef<Restaurant>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(50)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNo", DbType="Int")]
		public System.Nullable<int> phoneNo
		{
			get
			{
				return this._phoneNo;
			}
			set
			{
				if ((this._phoneNo != value))
				{
					this.OnphoneNoChanging(value);
					this.SendPropertyChanging();
					this._phoneNo = value;
					this.SendPropertyChanged("phoneNo");
					this.OnphoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roleId", DbType="Int NOT NULL")]
		public int roleId
		{
			get
			{
				return this._roleId;
			}
			set
			{
				if ((this._roleId != value))
				{
					this.OnroleIdChanging(value);
					this.SendPropertyChanging();
					this._roleId = value;
					this.SendPropertyChanged("roleId");
					this.OnroleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_OrderHistory", Storage="_OrderHistories", ThisKey="id", OtherKey="customerId")]
		public EntitySet<OrderHistory> OrderHistories
		{
			get
			{
				return this._OrderHistories;
			}
			set
			{
				this._OrderHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Restaurant", Storage="_Restaurant", ThisKey="id", OtherKey="id", IsUnique=true, IsForeignKey=false)]
		public Restaurant Restaurant
		{
			get
			{
				return this._Restaurant.Entity;
			}
			set
			{
				Restaurant previousValue = this._Restaurant.Entity;
				if (((previousValue != value) 
							|| (this._Restaurant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Restaurant.Entity = null;
						previousValue.Customer = null;
					}
					this._Restaurant.Entity = value;
					if ((value != null))
					{
						value.Customer = this;
					}
					this.SendPropertyChanged("Restaurant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_User", Storage="_User", ThisKey="id", OtherKey="customerId", IsUnique=true, IsForeignKey=false)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Customer = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Customer = this;
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderHistories(OrderHistory entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_OrderHistories(OrderHistory entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _menuId;
		
		private string _name;
		
		private string _description;
		
		private System.Nullable<int> _itemCatId;
		
		private EntitySet<OrderLineItem> _OrderLineItems;
		
		private EntitySet<Price> _Prices;
		
		private EntityRef<ItemCat> _ItemCat;
		
		private EntityRef<Menu> _Menu;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnmenuIdChanging(int value);
    partial void OnmenuIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnitemCatIdChanging(System.Nullable<int> value);
    partial void OnitemCatIdChanged();
    #endregion
		
		public Item()
		{
			this._OrderLineItems = new EntitySet<OrderLineItem>(new Action<OrderLineItem>(this.attach_OrderLineItems), new Action<OrderLineItem>(this.detach_OrderLineItems));
			this._Prices = new EntitySet<Price>(new Action<Price>(this.attach_Prices), new Action<Price>(this.detach_Prices));
			this._ItemCat = default(EntityRef<ItemCat>);
			this._Menu = default(EntityRef<Menu>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_menuId", DbType="Int NOT NULL")]
		public int menuId
		{
			get
			{
				return this._menuId;
			}
			set
			{
				if ((this._menuId != value))
				{
					if (this._Menu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmenuIdChanging(value);
					this.SendPropertyChanging();
					this._menuId = value;
					this.SendPropertyChanged("menuId");
					this.OnmenuIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemCatId", DbType="Int")]
		public System.Nullable<int> itemCatId
		{
			get
			{
				return this._itemCatId;
			}
			set
			{
				if ((this._itemCatId != value))
				{
					if (this._ItemCat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnitemCatIdChanging(value);
					this.SendPropertyChanging();
					this._itemCatId = value;
					this.SendPropertyChanged("itemCatId");
					this.OnitemCatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_OrderLineItem", Storage="_OrderLineItems", ThisKey="id", OtherKey="itemId")]
		public EntitySet<OrderLineItem> OrderLineItems
		{
			get
			{
				return this._OrderLineItems;
			}
			set
			{
				this._OrderLineItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Price", Storage="_Prices", ThisKey="id", OtherKey="itemId")]
		public EntitySet<Price> Prices
		{
			get
			{
				return this._Prices;
			}
			set
			{
				this._Prices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCat_Item", Storage="_ItemCat", ThisKey="itemCatId", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public ItemCat ItemCat
		{
			get
			{
				return this._ItemCat.Entity;
			}
			set
			{
				ItemCat previousValue = this._ItemCat.Entity;
				if (((previousValue != value) 
							|| (this._ItemCat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemCat.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._ItemCat.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._itemCatId = value.id;
					}
					else
					{
						this._itemCatId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ItemCat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_Item", Storage="_Menu", ThisKey="menuId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Menu Menu
		{
			get
			{
				return this._Menu.Entity;
			}
			set
			{
				Menu previousValue = this._Menu.Entity;
				if (((previousValue != value) 
							|| (this._Menu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Menu.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Menu.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._menuId = value.id;
					}
					else
					{
						this._menuId = default(int);
					}
					this.SendPropertyChanged("Menu");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderLineItems(OrderLineItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_OrderLineItems(OrderLineItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Prices(Price entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemCat")]
	public partial class ItemCat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public ItemCat()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCat_Item", Storage="_Items", ThisKey="id", OtherKey="itemCatId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemCat = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemCat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderHistory")]
	public partial class OrderHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _orderId;
		
		private int _customerId;
		
		private double _payment;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIdChanging(int value);
    partial void OnorderIdChanged();
    partial void OncustomerIdChanging(int value);
    partial void OncustomerIdChanged();
    partial void OnpaymentChanging(double value);
    partial void OnpaymentChanged();
    #endregion
		
		public OrderHistory()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int orderId
		{
			get
			{
				return this._orderId;
			}
			set
			{
				if ((this._orderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderIdChanging(value);
					this.SendPropertyChanging();
					this._orderId = value;
					this.SendPropertyChanged("orderId");
					this.OnorderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerId", DbType="Int NOT NULL")]
		public int customerId
		{
			get
			{
				return this._customerId;
			}
			set
			{
				if ((this._customerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncustomerIdChanging(value);
					this.SendPropertyChanging();
					this._customerId = value;
					this.SendPropertyChanged("customerId");
					this.OncustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_payment", DbType="Float NOT NULL")]
		public double payment
		{
			get
			{
				return this._payment;
			}
			set
			{
				if ((this._payment != value))
				{
					this.OnpaymentChanging(value);
					this.SendPropertyChanging();
					this._payment = value;
					this.SendPropertyChanged("payment");
					this.OnpaymentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_OrderHistory", Storage="_Customer", ThisKey="customerId", OtherKey="id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.OrderHistories.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.OrderHistories.Add(this);
						this._customerId = value.id;
					}
					else
					{
						this._customerId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderHistory", Storage="_Order", ThisKey="orderId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderHistory = null;
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderHistory = this;
						this._orderId = value.id;
					}
					else
					{
						this._orderId = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Menu")]
	public partial class Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _restaurantId;
		
		private string _name;
		
		private bool _active;
		
		private EntitySet<Item> _Items;
		
		private EntityRef<Restaurant> _Restaurant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnrestaurantIdChanging(int value);
    partial void OnrestaurantIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
		
		public Menu()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._Restaurant = default(EntityRef<Restaurant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_restaurantId", DbType="Int NOT NULL")]
		public int restaurantId
		{
			get
			{
				return this._restaurantId;
			}
			set
			{
				if ((this._restaurantId != value))
				{
					if (this._Restaurant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrestaurantIdChanging(value);
					this.SendPropertyChanging();
					this._restaurantId = value;
					this.SendPropertyChanged("restaurantId");
					this.OnrestaurantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_Item", Storage="_Items", ThisKey="id", OtherKey="menuId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Restaurant_Menu", Storage="_Restaurant", ThisKey="restaurantId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Restaurant Restaurant
		{
			get
			{
				return this._Restaurant.Entity;
			}
			set
			{
				Restaurant previousValue = this._Restaurant.Entity;
				if (((previousValue != value) 
							|| (this._Restaurant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Restaurant.Entity = null;
						previousValue.Menus.Remove(this);
					}
					this._Restaurant.Entity = value;
					if ((value != null))
					{
						value.Menus.Add(this);
						this._restaurantId = value.id;
					}
					else
					{
						this._restaurantId = default(int);
					}
					this.SendPropertyChanged("Restaurant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Menu = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Menu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderLineItem")]
	public partial class OrderLineItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _orderId;
		
		private int _itemId;
		
		private int _quantity;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIdChanging(int value);
    partial void OnorderIdChanged();
    partial void OnitemIdChanging(int value);
    partial void OnitemIdChanged();
    partial void OnquantityChanging(int value);
    partial void OnquantityChanged();
    #endregion
		
		public OrderLineItem()
		{
			this._Item = default(EntityRef<Item>);
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int orderId
		{
			get
			{
				return this._orderId;
			}
			set
			{
				if ((this._orderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderIdChanging(value);
					this.SendPropertyChanging();
					this._orderId = value;
					this.SendPropertyChanged("orderId");
					this.OnorderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int itemId
		{
			get
			{
				return this._itemId;
			}
			set
			{
				if ((this._itemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnitemIdChanging(value);
					this.SendPropertyChanging();
					this._itemId = value;
					this.SendPropertyChanged("itemId");
					this.OnitemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int NOT NULL")]
		public int quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_OrderLineItem", Storage="_Item", ThisKey="itemId", OtherKey="id", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.OrderLineItems.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.OrderLineItems.Add(this);
						this._itemId = value.id;
					}
					else
					{
						this._itemId = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderLineItem", Storage="_Order", ThisKey="orderId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderLineItems.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderLineItems.Add(this);
						this._orderId = value.id;
					}
					else
					{
						this._orderId = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _restaurantId;
		
		private System.Nullable<System.DateTime> _dateTime;
		
		private System.Nullable<System.DateTime> _reservation;
		
		private int _noSeats;
		
		private bool _accepted;
		
		private EntityRef<OrderHistory> _OrderHistory;
		
		private EntitySet<OrderLineItem> _OrderLineItems;
		
		private EntitySet<ReservedTable> _ReservedTables;
		
		private EntityRef<Restaurant> _Restaurant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnrestaurantIdChanging(int value);
    partial void OnrestaurantIdChanged();
    partial void OndateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OndateTimeChanged();
    partial void OnreservationChanging(System.Nullable<System.DateTime> value);
    partial void OnreservationChanged();
    partial void OnnoSeatsChanging(int value);
    partial void OnnoSeatsChanged();
    partial void OnacceptedChanging(bool value);
    partial void OnacceptedChanged();
    #endregion
		
		public Order()
		{
			this._OrderHistory = default(EntityRef<OrderHistory>);
			this._OrderLineItems = new EntitySet<OrderLineItem>(new Action<OrderLineItem>(this.attach_OrderLineItems), new Action<OrderLineItem>(this.detach_OrderLineItems));
			this._ReservedTables = new EntitySet<ReservedTable>(new Action<ReservedTable>(this.attach_ReservedTables), new Action<ReservedTable>(this.detach_ReservedTables));
			this._Restaurant = default(EntityRef<Restaurant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_restaurantId", DbType="Int NOT NULL")]
		public int restaurantId
		{
			get
			{
				return this._restaurantId;
			}
			set
			{
				if ((this._restaurantId != value))
				{
					if (this._Restaurant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrestaurantIdChanging(value);
					this.SendPropertyChanging();
					this._restaurantId = value;
					this.SendPropertyChanged("restaurantId");
					this.OnrestaurantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateTime
		{
			get
			{
				return this._dateTime;
			}
			set
			{
				if ((this._dateTime != value))
				{
					this.OndateTimeChanging(value);
					this.SendPropertyChanging();
					this._dateTime = value;
					this.SendPropertyChanged("dateTime");
					this.OndateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reservation", DbType="DateTime")]
		public System.Nullable<System.DateTime> reservation
		{
			get
			{
				return this._reservation;
			}
			set
			{
				if ((this._reservation != value))
				{
					this.OnreservationChanging(value);
					this.SendPropertyChanging();
					this._reservation = value;
					this.SendPropertyChanged("reservation");
					this.OnreservationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_noSeats", DbType="Int NOT NULL")]
		public int noSeats
		{
			get
			{
				return this._noSeats;
			}
			set
			{
				if ((this._noSeats != value))
				{
					this.OnnoSeatsChanging(value);
					this.SendPropertyChanging();
					this._noSeats = value;
					this.SendPropertyChanged("noSeats");
					this.OnnoSeatsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_accepted", DbType="Bit NOT NULL")]
		public bool accepted
		{
			get
			{
				return this._accepted;
			}
			set
			{
				if ((this._accepted != value))
				{
					this.OnacceptedChanging(value);
					this.SendPropertyChanging();
					this._accepted = value;
					this.SendPropertyChanged("accepted");
					this.OnacceptedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderHistory", Storage="_OrderHistory", ThisKey="id", OtherKey="orderId", IsUnique=true, IsForeignKey=false)]
		public OrderHistory OrderHistory
		{
			get
			{
				return this._OrderHistory.Entity;
			}
			set
			{
				OrderHistory previousValue = this._OrderHistory.Entity;
				if (((previousValue != value) 
							|| (this._OrderHistory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderHistory.Entity = null;
						previousValue.Order = null;
					}
					this._OrderHistory.Entity = value;
					if ((value != null))
					{
						value.Order = this;
					}
					this.SendPropertyChanged("OrderHistory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderLineItem", Storage="_OrderLineItems", ThisKey="id", OtherKey="orderId")]
		public EntitySet<OrderLineItem> OrderLineItems
		{
			get
			{
				return this._OrderLineItems;
			}
			set
			{
				this._OrderLineItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_ReservedTable", Storage="_ReservedTables", ThisKey="id", OtherKey="orderId")]
		public EntitySet<ReservedTable> ReservedTables
		{
			get
			{
				return this._ReservedTables;
			}
			set
			{
				this._ReservedTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Restaurant_Order", Storage="_Restaurant", ThisKey="restaurantId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Restaurant Restaurant
		{
			get
			{
				return this._Restaurant.Entity;
			}
			set
			{
				Restaurant previousValue = this._Restaurant.Entity;
				if (((previousValue != value) 
							|| (this._Restaurant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Restaurant.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Restaurant.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._restaurantId = value.id;
					}
					else
					{
						this._restaurantId = default(int);
					}
					this.SendPropertyChanged("Restaurant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderLineItems(OrderLineItem entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderLineItems(OrderLineItem entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_ReservedTables(ReservedTable entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_ReservedTables(ReservedTable entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Price")]
	public partial class Price : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _itemId;
		
		private double _price1;
		
		private System.DateTime _startDate;
		
		private System.DateTime _endDate;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnitemIdChanging(int value);
    partial void OnitemIdChanged();
    partial void Onprice1Changing(double value);
    partial void Onprice1Changed();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnendDateChanging(System.DateTime value);
    partial void OnendDateChanged();
    #endregion
		
		public Price()
		{
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_itemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int itemId
		{
			get
			{
				return this._itemId;
			}
			set
			{
				if ((this._itemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnitemIdChanging(value);
					this.SendPropertyChanging();
					this._itemId = value;
					this.SendPropertyChanged("itemId");
					this.OnitemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="price", Storage="_price1", DbType="Float NOT NULL")]
		public double price1
		{
			get
			{
				return this._price1;
			}
			set
			{
				if ((this._price1 != value))
				{
					this.Onprice1Changing(value);
					this.SendPropertyChanging();
					this._price1 = value;
					this.SendPropertyChanged("price1");
					this.Onprice1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime endDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if ((this._endDate != value))
				{
					this.OnendDateChanging(value);
					this.SendPropertyChanging();
					this._endDate = value;
					this.SendPropertyChanged("endDate");
					this.OnendDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Price", Storage="_Item", ThisKey="itemId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Prices.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Prices.Add(this);
						this._itemId = value.id;
					}
					else
					{
						this._itemId = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResCat")]
	public partial class ResCat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Restaurant> _Restaurants;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public ResCat()
		{
			this._Restaurants = new EntitySet<Restaurant>(new Action<Restaurant>(this.attach_Restaurants), new Action<Restaurant>(this.detach_Restaurants));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResCat_Restaurant", Storage="_Restaurants", ThisKey="id", OtherKey="resCatId")]
		public EntitySet<Restaurant> Restaurants
		{
			get
			{
				return this._Restaurants;
			}
			set
			{
				this._Restaurants.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Restaurants(Restaurant entity)
		{
			this.SendPropertyChanging();
			entity.ResCat = this;
		}
		
		private void detach_Restaurants(Restaurant entity)
		{
			this.SendPropertyChanging();
			entity.ResCat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReservedTable")]
	public partial class ReservedTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _tableId;
		
		private int _orderId;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<ResTable> _ResTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntableIdChanging(int value);
    partial void OntableIdChanged();
    partial void OnorderIdChanging(int value);
    partial void OnorderIdChanged();
    #endregion
		
		public ReservedTable()
		{
			this._Order = default(EntityRef<Order>);
			this._ResTable = default(EntityRef<ResTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tableId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int tableId
		{
			get
			{
				return this._tableId;
			}
			set
			{
				if ((this._tableId != value))
				{
					if (this._ResTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntableIdChanging(value);
					this.SendPropertyChanging();
					this._tableId = value;
					this.SendPropertyChanged("tableId");
					this.OntableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int orderId
		{
			get
			{
				return this._orderId;
			}
			set
			{
				if ((this._orderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderIdChanging(value);
					this.SendPropertyChanging();
					this._orderId = value;
					this.SendPropertyChanged("orderId");
					this.OnorderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_ReservedTable", Storage="_Order", ThisKey="orderId", OtherKey="id", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.ReservedTables.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.ReservedTables.Add(this);
						this._orderId = value.id;
					}
					else
					{
						this._orderId = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResTable_ReservedTable", Storage="_ResTable", ThisKey="tableId", OtherKey="id", IsForeignKey=true)]
		public ResTable ResTable
		{
			get
			{
				return this._ResTable.Entity;
			}
			set
			{
				ResTable previousValue = this._ResTable.Entity;
				if (((previousValue != value) 
							|| (this._ResTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResTable.Entity = null;
						previousValue.ReservedTables.Remove(this);
					}
					this._ResTable.Entity = value;
					if ((value != null))
					{
						value.ReservedTables.Add(this);
						this._tableId = value.id;
					}
					else
					{
						this._tableId = default(int);
					}
					this.SendPropertyChanged("ResTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResTable")]
	public partial class ResTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _restaurantId;
		
		private int _noSeats;
		
		private bool _reserved;
		
		private EntitySet<ReservedTable> _ReservedTables;
		
		private EntityRef<Restaurant> _Restaurant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnrestaurantIdChanging(int value);
    partial void OnrestaurantIdChanged();
    partial void OnnoSeatsChanging(int value);
    partial void OnnoSeatsChanged();
    partial void OnreservedChanging(bool value);
    partial void OnreservedChanged();
    #endregion
		
		public ResTable()
		{
			this._ReservedTables = new EntitySet<ReservedTable>(new Action<ReservedTable>(this.attach_ReservedTables), new Action<ReservedTable>(this.detach_ReservedTables));
			this._Restaurant = default(EntityRef<Restaurant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_restaurantId", DbType="Int NOT NULL")]
		public int restaurantId
		{
			get
			{
				return this._restaurantId;
			}
			set
			{
				if ((this._restaurantId != value))
				{
					if (this._Restaurant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnrestaurantIdChanging(value);
					this.SendPropertyChanging();
					this._restaurantId = value;
					this.SendPropertyChanged("restaurantId");
					this.OnrestaurantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_noSeats", DbType="Int NOT NULL")]
		public int noSeats
		{
			get
			{
				return this._noSeats;
			}
			set
			{
				if ((this._noSeats != value))
				{
					this.OnnoSeatsChanging(value);
					this.SendPropertyChanging();
					this._noSeats = value;
					this.SendPropertyChanged("noSeats");
					this.OnnoSeatsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reserved", DbType="Bit NOT NULL")]
		public bool reserved
		{
			get
			{
				return this._reserved;
			}
			set
			{
				if ((this._reserved != value))
				{
					this.OnreservedChanging(value);
					this.SendPropertyChanging();
					this._reserved = value;
					this.SendPropertyChanged("reserved");
					this.OnreservedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResTable_ReservedTable", Storage="_ReservedTables", ThisKey="id", OtherKey="tableId")]
		public EntitySet<ReservedTable> ReservedTables
		{
			get
			{
				return this._ReservedTables;
			}
			set
			{
				this._ReservedTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Restaurant_ResTable", Storage="_Restaurant", ThisKey="restaurantId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Restaurant Restaurant
		{
			get
			{
				return this._Restaurant.Entity;
			}
			set
			{
				Restaurant previousValue = this._Restaurant.Entity;
				if (((previousValue != value) 
							|| (this._Restaurant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Restaurant.Entity = null;
						previousValue.ResTables.Remove(this);
					}
					this._Restaurant.Entity = value;
					if ((value != null))
					{
						value.ResTables.Add(this);
						this._restaurantId = value.id;
					}
					else
					{
						this._restaurantId = default(int);
					}
					this.SendPropertyChanged("Restaurant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReservedTables(ReservedTable entity)
		{
			this.SendPropertyChanging();
			entity.ResTable = this;
		}
		
		private void detach_ReservedTables(ReservedTable entity)
		{
			this.SendPropertyChanging();
			entity.ResTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Restaurant")]
	public partial class Restaurant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _address;
		
		private int _zipcode;
		
		private int _phoneNo;
		
		private string _email;
		
		private bool _verified;
		
		private System.Nullable<int> _resCatId;
		
		private bool _discontinued;
		
		private EntitySet<Menu> _Menus;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<ResTable> _ResTables;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<ResCat> _ResCat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnzipcodeChanging(int value);
    partial void OnzipcodeChanged();
    partial void OnphoneNoChanging(int value);
    partial void OnphoneNoChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnverifiedChanging(bool value);
    partial void OnverifiedChanged();
    partial void OnresCatIdChanging(System.Nullable<int> value);
    partial void OnresCatIdChanged();
    partial void OndiscontinuedChanging(bool value);
    partial void OndiscontinuedChanged();
    #endregion
		
		public Restaurant()
		{
			this._Menus = new EntitySet<Menu>(new Action<Menu>(this.attach_Menus), new Action<Menu>(this.detach_Menus));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._ResTables = new EntitySet<ResTable>(new Action<ResTable>(this.attach_ResTables), new Action<ResTable>(this.detach_ResTables));
			this._Customer = default(EntityRef<Customer>);
			this._ResCat = default(EntityRef<ResCat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zipcode", DbType="Int NOT NULL")]
		public int zipcode
		{
			get
			{
				return this._zipcode;
			}
			set
			{
				if ((this._zipcode != value))
				{
					this.OnzipcodeChanging(value);
					this.SendPropertyChanging();
					this._zipcode = value;
					this.SendPropertyChanged("zipcode");
					this.OnzipcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNo", DbType="Int NOT NULL")]
		public int phoneNo
		{
			get
			{
				return this._phoneNo;
			}
			set
			{
				if ((this._phoneNo != value))
				{
					this.OnphoneNoChanging(value);
					this.SendPropertyChanging();
					this._phoneNo = value;
					this.SendPropertyChanged("phoneNo");
					this.OnphoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_verified", DbType="Bit NOT NULL")]
		public bool verified
		{
			get
			{
				return this._verified;
			}
			set
			{
				if ((this._verified != value))
				{
					this.OnverifiedChanging(value);
					this.SendPropertyChanging();
					this._verified = value;
					this.SendPropertyChanged("verified");
					this.OnverifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_resCatId", DbType="Int")]
		public System.Nullable<int> resCatId
		{
			get
			{
				return this._resCatId;
			}
			set
			{
				if ((this._resCatId != value))
				{
					if (this._ResCat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnresCatIdChanging(value);
					this.SendPropertyChanging();
					this._resCatId = value;
					this.SendPropertyChanged("resCatId");
					this.OnresCatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_discontinued", DbType="Bit NOT NULL")]
		public bool discontinued
		{
			get
			{
				return this._discontinued;
			}
			set
			{
				if ((this._discontinued != value))
				{
					this.OndiscontinuedChanging(value);
					this.SendPropertyChanging();
					this._discontinued = value;
					this.SendPropertyChanged("discontinued");
					this.OndiscontinuedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Restaurant_Menu", Storage="_Menus", ThisKey="id", OtherKey="restaurantId")]
		public EntitySet<Menu> Menus
		{
			get
			{
				return this._Menus;
			}
			set
			{
				this._Menus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Restaurant_Order", Storage="_Orders", ThisKey="id", OtherKey="restaurantId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Restaurant_ResTable", Storage="_ResTables", ThisKey="id", OtherKey="restaurantId")]
		public EntitySet<ResTable> ResTables
		{
			get
			{
				return this._ResTables;
			}
			set
			{
				this._ResTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Restaurant", Storage="_Customer", ThisKey="id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Restaurant = null;
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Restaurant = this;
						this._id = value.id;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResCat_Restaurant", Storage="_ResCat", ThisKey="resCatId", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public ResCat ResCat
		{
			get
			{
				return this._ResCat.Entity;
			}
			set
			{
				ResCat previousValue = this._ResCat.Entity;
				if (((previousValue != value) 
							|| (this._ResCat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResCat.Entity = null;
						previousValue.Restaurants.Remove(this);
					}
					this._ResCat.Entity = value;
					if ((value != null))
					{
						value.Restaurants.Add(this);
						this._resCatId = value.id;
					}
					else
					{
						this._resCatId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ResCat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Menus(Menu entity)
		{
			this.SendPropertyChanging();
			entity.Restaurant = this;
		}
		
		private void detach_Menus(Menu entity)
		{
			this.SendPropertyChanging();
			entity.Restaurant = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Restaurant = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Restaurant = null;
		}
		
		private void attach_ResTables(ResTable entity)
		{
			this.SendPropertyChanging();
			entity.Restaurant = this;
		}
		
		private void detach_ResTables(ResTable entity)
		{
			this.SendPropertyChanging();
			entity.Restaurant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _customerId;
		
		private string _password;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncustomerIdChanging(int value);
    partial void OncustomerIdChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public User()
		{
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customerId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int customerId
		{
			get
			{
				return this._customerId;
			}
			set
			{
				if ((this._customerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncustomerIdChanging(value);
					this.SendPropertyChanging();
					this._customerId = value;
					this.SendPropertyChanged("customerId");
					this.OncustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(MAX)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_User", Storage="_Customer", ThisKey="customerId", OtherKey="id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.User = null;
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.User = this;
						this._customerId = value.id;
					}
					else
					{
						this._customerId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
