//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserWebClient.CustomerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CustomerService.ICustomerService")]
    public interface ICustomerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/LoginCustomer", ReplyAction="http://tempuri.org/ICustomerService/LoginCustomerResponse")]
        ModelLibrary.Customer LoginCustomer(string email, string passwordHashed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/LoginCustomer", ReplyAction="http://tempuri.org/ICustomerService/LoginCustomerResponse")]
        System.Threading.Tasks.Task<ModelLibrary.Customer> LoginCustomerAsync(string email, string passwordHashed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/GetCustomerById", ReplyAction="http://tempuri.org/ICustomerService/GetCustomerByIdResponse")]
        ModelLibrary.Customer GetCustomerById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/GetCustomerById", ReplyAction="http://tempuri.org/ICustomerService/GetCustomerByIdResponse")]
        System.Threading.Tasks.Task<ModelLibrary.Customer> GetCustomerByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/GetCustomerByEmail", ReplyAction="http://tempuri.org/ICustomerService/GetCustomerByEmailResponse")]
        ModelLibrary.Customer GetCustomerByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/GetCustomerByEmail", ReplyAction="http://tempuri.org/ICustomerService/GetCustomerByEmailResponse")]
        System.Threading.Tasks.Task<ModelLibrary.Customer> GetCustomerByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/RegisterUser", ReplyAction="http://tempuri.org/ICustomerService/RegisterUserResponse")]
        bool RegisterUser(ModelLibrary.Customer customer, string passwordHashed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICustomerService/RegisterUser", ReplyAction="http://tempuri.org/ICustomerService/RegisterUserResponse")]
        System.Threading.Tasks.Task<bool> RegisterUserAsync(ModelLibrary.Customer customer, string passwordHashed);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICustomerServiceChannel : UserWebClient.CustomerService.ICustomerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomerServiceClient : System.ServiceModel.ClientBase<UserWebClient.CustomerService.ICustomerService>, UserWebClient.CustomerService.ICustomerService {
        
        public CustomerServiceClient() {
        }
        
        public CustomerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CustomerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CustomerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CustomerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ModelLibrary.Customer LoginCustomer(string email, string passwordHashed) {
            return base.Channel.LoginCustomer(email, passwordHashed);
        }
        
        public System.Threading.Tasks.Task<ModelLibrary.Customer> LoginCustomerAsync(string email, string passwordHashed) {
            return base.Channel.LoginCustomerAsync(email, passwordHashed);
        }
        
        public ModelLibrary.Customer GetCustomerById(int id) {
            return base.Channel.GetCustomerById(id);
        }
        
        public System.Threading.Tasks.Task<ModelLibrary.Customer> GetCustomerByIdAsync(int id) {
            return base.Channel.GetCustomerByIdAsync(id);
        }
        
        public ModelLibrary.Customer GetCustomerByEmail(string email) {
            return base.Channel.GetCustomerByEmail(email);
        }
        
        public System.Threading.Tasks.Task<ModelLibrary.Customer> GetCustomerByEmailAsync(string email) {
            return base.Channel.GetCustomerByEmailAsync(email);
        }
        
        public bool RegisterUser(ModelLibrary.Customer customer, string passwordHashed) {
            return base.Channel.RegisterUser(customer, passwordHashed);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterUserAsync(ModelLibrary.Customer customer, string passwordHashed) {
            return base.Channel.RegisterUserAsync(customer, passwordHashed);
        }
    }
}
